{"version":3,"sources":["lib/todoHelpers.js","lib/utils.js","components/Todo/TodoForm.js","components/Todo/TodoItem.js","components/Todo/TodoList.js","styled/TodoTitle.js","pages/UpcomingTask.js","pages/CompletedTask.js","App.js","serviceWorker.js","index.js"],"names":["addTodo","list","item","generateId","Math","floor","random","findById","id","find","toggleTodo","todo","isComplete","updateTodo","updatedItem","updatedIndex","findIndex","slice","removeTodo","todoId","todoIndex","partial","fn","args","bind","_pipe","f","g","pipe","fns","reduce","TodoInputLayout","styled","div","TodoForm","props","onSubmit","handleSubmit","focus","type","value","currentTodo","onChange","handleOnchangeInput","TodoItem","hangleToggle","handleToggle","handleRemove","Fragment","htmlFor","checked","name","href","title","onClick","TodoList","className","todos","map","key","handleOnchangeCheckbox","TodoTitle","UpcomingTask","errorMessage","submitHandler","CompletedTask","App","state","updatedTodos","pipeline","setState","event","target","preventDefault","newTodo","handleEmptySubmit","handleUpcoming","param","this","to","exact","path","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d13933d.chunk.js","sourcesContent":["/**\n * addTodo\n * \n * @param {any} list \n * @param {any} item \n */\nexport const addTodo = (list, item) => [item, ...list]\n\n/**\n * generateId\n * \n */\nexport const generateId = () => Math.floor(Math.random() * 100000)\n\n/**\n * findById\n * \n * @param {any} id \n * @param {any} list \n */\nexport const findById = (id, list) => list.find(item => item.id === id)\n\n\n/**\n * toggleTodo\n * \n * @param {any} todo \n */\nexport const toggleTodo = (todo) => ({ ...todo, isComplete: !todo.isComplete })\n\n/**\n * updateTodo\n * \n * @param {any} list \n * @param {any} updatedItem \n * @returns \n */\nexport const updateTodo = (list, updatedItem) => { \n    const updatedIndex = list.findIndex(item => item.id === updatedItem.id)\n\n    return [\n        ...list.slice(0, updatedIndex),\n        updatedItem,\n        ...list.slice(updatedIndex + 1)\n    ]\n}\n\nexport const removeTodo = (list, todoId) => {\n    const todoIndex = list.findIndex(item => item.id === todoId)\n    return [\n        ...list.slice(0, todoIndex),\n        ...list.slice(todoIndex + 1)\n    ]\n}\n\n","/**\n * Partial\n * @param {*} fn \n * @param {*} args \n */\nexport const partial = (fn, ...args) => fn.bind(null, ...args)\n\n/**\n * Pipe function\n * @param {*} f \n * @param {*} g \n */\nconst _pipe = (f, g) => (...args) => g(f(...args))\n\nexport const pipe = (...fns) => fns.reduce(_pipe)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from \"styled-components\";\n\nconst TodoInputLayout = styled.div`\ndisplay:flex;\njustify-content:space-between;\ninput{\n    width:90%;\n    margin-right:10px;\n}\n`\nexport const TodoForm = props => { \n    return(\n        <form onSubmit={props.handleSubmit}>\n            <TodoInputLayout>\n            <input focus=\"true\" type=\"text\" value={props.currentTodo} onChange={props.handleOnchangeInput} />\n            <button>Add</button>\n            </TodoInputLayout>\n          </form>\n    )\n}\n\nTodoForm.propTypes = {\n    currentTodo: PropTypes.string.isRequired,\n    handleOnchangeInput: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { partial } from '../../lib/utils';\n\nexport const TodoItem = props => { \n    const hangleToggle = props.handleToggle && partial(props.handleToggle, props.id)\n    const handleRemove = props.handleRemove && partial(props.handleRemove, props.id)\n\n    return (\n      <React.Fragment> \n         {props.handleToggle && <li>\n            <label htmlFor={props.id}>\n                <input type=\"checkbox\" id={props.id}\n                    checked={props.isComplete}\n                    onChange={hangleToggle}   \n                    \n                />\n                {props.name}\n            </label> \n            <a href=\"#\" title=\"Remove Todo\" onClick={handleRemove}>x</a>    \n         </li> }\n         {!props.handleToggle &&  props.isComplete && <li>{props.name}</li>}\n             </React.Fragment> \n\n    )\n}\n\nTodoItem.propTypes = {\n    id: PropTypes.number.isRequired,\n    isComplete: PropTypes.bool,\n    name: PropTypes.string.isRequired\n}","import React from 'react'\nimport { TodoItem } from './TodoItem'\nimport PropTypes from 'prop-types'\n\nexport const TodoList = props => { \n    return (\n        <ul className=\"todoList\">\n            {props.todos.map(todo =>\n                <TodoItem key={todo.id}\n                    { ...todo}\n                    handleToggle={props.handleToggle}\n                    handleOnchangeCheckbox={props.handleOnchangeCheckbox}\n                    handleRemove={props.handleRemove}\n                />)}\n          </ul>\n    )\n}\n\nTodoList.propTypes = {\n    todos: PropTypes.array.isRequired,\n    handleOnchangeCheckbox: PropTypes.func,\n    handleRemove: PropTypes.func\n}\n","import React from 'react';\nimport styled from \"styled-components\";\n\nconst TodoTitle = styled.div`\nfont-size:20px;\ncolor:deepblue;\npadding:10px;\nfont-weight:bold;\n`\nexport default TodoTitle;","import React from 'react';\nimport { TodoList, TodoForm } from '../components/Todo';\nimport TodoTitle from '../styled/TodoTitle'\n\n\n\n\nconst UpcomingTask =({todos, handleToggle, handleOnchangeCheckbox, handleRemove, errorMessage, submitHandler, currentTodo, handleOnchangeInput})=>{\n    return(<>\n        <TodoTitle> Upcoming Task</TodoTitle>\n   \n    {errorMessage && <div className=\"errorMessage\">{errorMessage}</div>}  \n \n      <TodoList\n              todos={todos}\n              handleToggle={handleToggle }\n              handleOnchangeCheckbox={handleOnchangeCheckbox}\n              handleRemove = {handleRemove}\n            />\n      <TodoForm\n          handleSubmit={ submitHandler }  \n          currentTodo={currentTodo}\n          handleOnchangeInput={handleOnchangeInput} />\n        </>\n\n        )\n}\n\nexport default  UpcomingTask;","import React from 'react';\nimport { TodoList } from '../components/Todo';\nimport TodoTitle from '../styled/TodoTitle'\n\nconst CompletedTask =({todos})=>{\n    return(<><TodoTitle>Completed Task</TodoTitle>\n    <TodoList\n            todos={todos}/>\n    </>)\n}\n\nexport default  CompletedTask;","import React, { Component } from 'react';\nimport './App.css';\nimport { addTodo, generateId, findById, toggleTodo, updateTodo, removeTodo } from './lib/todoHelpers';\nimport { pipe, partial } from './lib/utils';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport UpcomingTask from './pages/UpcomingTask';\nimport CompletedTask from './pages/CompletedTask';\n\nclass App extends Component {\n\n  state = {\n    currentTodo: \"\",\n    errorMessage: \"\",\n    isComplete: false,\n    todos: [\n      { id: 1, name: 'Capita', isComplete: true },\n      { id: 2, name: 'Microlise', isComplete: false },\n      { id: 3, name: 'Wipro', isComplete: true }\n    ]\n  }\n\n  handleToggle = (todoId) => { \n\n    const pipeline = pipe(findById, toggleTodo, partial(updateTodo, this.state.todos))\n    const updatedTodos = pipeline(todoId, this.state.todos)\n\n    this.setState({todos: updatedTodos})\n  }\n\n  handleOnchangeInput= (event)=> {\n    this.setState({currentTodo: event.target.value, errorMessage: \"\"})\n  }\n\n  handleSubmit = (event) => { \n    event.preventDefault()\n\n    const newTodo = { id: generateId(), name: this.state.currentTodo, isComplete: false }\n\n    const updatedTodos = addTodo(this.state.todos, newTodo)\n    \n    this.setState({ todos: updatedTodos, currentTodo: '' })\n  }\n\n  handleEmptySubmit = (event) => {\n    event.preventDefault()\n\n    this.setState({ errorMessage: \"Please add a todo name\" })\n  }\n\n  handleRemove = (id, event) => {\n    event.preventDefault()\n\n    const updatedTodos = removeTodo(this.state.todos, id)\n\n    this.setState({todos: updatedTodos})\n  }\n\n  handleUpcoming=(param)=>{\n      this.setState({isComplete: param})\n  }\n\n  render() {\n\n    const submitHandler = this.state.currentTodo ? this.handleSubmit : this.handleEmptySubmit\n\n    return (\n      <div className=\"App\">\n        <Router>\n          <nav>\n            <Link to=\"/upcoming\">Upcomming Task</Link>\n            <Link to=\"/completed\">Completed Tasking</Link>\n          </nav>\n          <div className=\"todoWrapper\">\n        <Switch>\n          <Route exact path=\"/upcoming\">\n                <UpcomingTask \n                state={this.state.errorMessage}\n                todos={this.state.todos}\n                handleToggle={ this.handleToggle }\n                handleOnchangeCheckbox={this.handleOnchangeCheckbox}\n                handleRemove = {this.handleRemove}\n                currentTodo={this.state.currentTodo}\n                handleOnchangeInput={this.handleOnchangeInput}\n                submitHandler={submitHandler}/>\n          </Route>\n          <Route exact path=\"/completed\">\n            <CompletedTask todos={this.state.todos}/>\n          </Route>\n        </Switch>\n        </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}